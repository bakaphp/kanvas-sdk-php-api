#!/usr/bin/env php
<?php

// Copied from <https://github.com/limingxinleo>

define('ROOT_PATH', __DIR__);
define('APP_PATH', ROOT_PATH);
define('IS_CLI', false);
define('ENGINE', 'SWOOLE');

use Phalcon\Di\FactoryDefault;
use Canvas\Bootstrap\Swoole;
use Canvas\Http\SwooleResponse;
use Canvas\Exception\ServerErrorHttpException;

$script = $argv[0];
if (empty($argv[1])) {
    echo './server [start|restart|reload|stop|status]' . PHP_EOL;
    exit;
}

$action = $argv[1];

//auto load
require_once __DIR__ . '/vendor/autoload.php';

/**
 * Get config service for use in inline setup below.
 */
$pidDir = ROOT_PATH;
$logDir = ROOT_PATH . '/logs';

//move to config
$host = '0.0.0.0';
$port = 8081;

$pidFile = $pidDir . 'swoole_http_server.pid';
$logFile = $logDir . 'swoole_http_server.log';

$pid = 0;
if (file_exists($pidFile)) {
    $pid = intval(file_get_contents($pidFile));
    if (!swoole_process::kill($pid, 0)) {
        $pid = 0;
    }
}

switch ($action) {
    case 'restart':
        if ($pid > 0) {
            swoole_process::kill($pid);
            while (swoole_process::kill($pid, 0)) {
            }
        }
    // no break
    case 'start':
        $http = new swoole_http_server($host, $port);

        /**
         * @todo move to .env or another config file
         */
        $http->set([
            'dispatch_mode' => 2,
            'worker_num' => 10,
            'max_request' => 10000,
            'log_file' => $logFile,
            'log_level' => 5,
            'pid_file' => $pidFile,
            'open_tcp_nodelay' => 1,
            'daemonize' => 0,
        ]);
        $http->on('workerStart', function () {
            /** @var FactoryDefault $di */
            require __DIR__ . '/library/Core/autoload.php';
        });
        $http->on('request', function ($request, $response) {
            $response->header('Access-Control-Allow-Origin', '*');
            $response->header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, DELETE');
            $response->header('Access-Control-Allow-Headers', 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range,publicKey,Authorization');
            $response->header('Access-Control-Max-Age', '86400');
            $response->header('Access-Control-Allow-Credentials', 'true');
            $response->header('Content-Type', 'text/plain charset=UTF-8');

            try {
                //OPTION Request
                if ($request->server['request_method'] == 'OPTIONS') {
                    $response->status(200);
                    $response->end();
                    return;
                };

                $bootstrap = new Swoole();
                $bootstrap->setup();

                $SRequest = $bootstrap->getContainer()->get('request');
                $SResponse = $bootstrap->getContainer()->get('response');
                $SResponse->init($response);
                $SRequest->init($request);

                $bootstrap->run();
            } catch (Throwable $e) {
                //Server errores FATAL

                $httpCode = (method_exists($e, 'getHttpCode')) ? $e->getHttpCode() : 400;
                $httpMessage = (method_exists($e, 'getHttpMessage')) ? $e->getHttpMessage() : 'Bad Request';
                $data = (method_exists($e, 'getData')) ? $e->getData() : [];

                //if we get a exception before response
                if (!is_object($SResponse)) {
                    $SResponse = new SwooleResponse();
                    $SResponse->init($response);
                }
                $SResponse->setHeader('Access-Control-Allow-Origin', '*'); //@todo check why this fails on nginx
                $SResponse->setStatusCode($httpCode, $httpMessage);
                $SResponse->setContentType('application/json');

                $content = '';
                $timestamp = date('c');
                $hash = sha1($timestamp . $content);
                $eTag = sha1($content);

                $jsonapi = [
                    'jsonapi' => [
                        'version' => '1.0',
                    ],
                ];
                $meta = [
                    'meta' => [
                        'timestamp' => $timestamp,
                        'hash' => $hash,
                    ]
                ];

                $content = [
                    'errors' => [
                        'type' => $httpMessage,
                        'message' => $e->getMessage(),
                        'trace' => $e->getTraceAsString(),
                        'data' => $data,
                    ],
                ];

                $data = $jsonapi + $content + $meta;

                $SResponse->setJsonContent($data);

                if ($e instanceof ServerErrorHttpException && getenv('PRODUCTION')) {
                    $bootstrap->getContainer()->getLog()->error($e->getTraceAsString());
                }

                $SResponse->send();
            }
        });

        echo 'swoole http server start.' . PHP_EOL;
        $http->start();
        break;
    case 'reload':
        if ($pid > 0 && swoole_process::kill($pid, SIGUSR1)) {
            echo 'swoole http server reload successed.' . PHP_EOL;
        } else {
            echo 'swoole http server is not running' . PHP_EOL;
        }
        break;
    case 'stop':
        if ($pid > 0 && swoole_process::kill($pid)) {
            echo 'swoole http server stop successed.' . PHP_EOL;
        } else {
            echo 'swoole http server is not running' . PHP_EOL;
        }
        break;
    case 'status':
        if ($pid > 0) {
            echo 'swoole http server is running. master pid is ' . $pid . PHP_EOL;
        } else {
            echo 'swoole http server is not running' . PHP_EOL;
        }
        break;
}
